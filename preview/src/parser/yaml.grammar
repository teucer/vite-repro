@top YamlText { document }

@skip { space | newlineEmpty | Comment }

document { DocStart newline statement* DocEnd }

statement { Key colon value newline }

value { scalar | MultiLine | Mapping | Sequence }

scalar { Boolean | Null | Number  | String }
String { plain | string }

MultiLine { quote plain multiline quote | FoldOp newline multiline }

@skip {} {
  multiline { newline indent (plain newline)+ dedent }
}

Mapping { "{" commaSep<scalar>? "}" }

Sequence { "[" commaSep<scalar>? "]" }

DocStart { @specialize<Key, "---" > }
DocEnd { @specialize<Key, "..." > }
FoldOp { @specialize<Key, "|" | ">" | "|-" | ">-" | "|+" | ">+" > }

Boolean { @specialize<Key, "true" | "false" > }
Null { @specialize<Key, "null" | "~" > }

@context trackIndent from "./tokens.js"

@external tokens indentation from "./tokens" { indent, dedent }

@tokens {
  colon { ": " }
  
  Key { keyChar (std.digit | keyChar)* }
  keyChar { std.asciiLetter | "_" }

  Number { "-"? (int | int? frac) exp? }
  int { "0" | $[1-9] std.digit* }
  frac { "." (std.digit+ | "nan" | "inf") }
  exp { $[eE] $[+\-]? std.digit+ }

  string { quote (!["\n\r] | "\\" _)+ quote }
  plain { ![{}\[\]&*#?|\-<>=!%@:" \t\f] (!["\n\r] | "\\" _)+ }

  quote { '"' }
  Comment { "#" ![\n\r]* }
  space { ($[ \t\f] | "\\" $[\n\r])+ }

  "{" "}" "[" "]"

  @precedence { Comment, Key, Number, colon, plain }
}

commaSep<expr> { expr ("," expr)* }

@external tokens newlines from "./tokens" { newline, newlineEmpty }

@external propSource jsonHighlighting from "./highlight"

@detectDelim